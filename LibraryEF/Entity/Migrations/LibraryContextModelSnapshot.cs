// <auto-generated />
using System;
using Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateOnly>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("pk_Author");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("Entity.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PublishingCity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PublishingCode")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("PublishingCountry")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("PublishingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PublishingYear")
                        .HasColumnType("int");

                    b.Property<int>("TermLendDays")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("pk_Book");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublishingTypeId");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("Entity.Models.DocType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("pk_DocType");

                    b.ToTable("DocType", (string)null);
                });

            modelBuilder.Entity("Entity.Models.LendBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("TakenDate")
                        .HasColumnType("date");

                    b.Property<int>("TermLendDays")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("pk_LendBook");

                    b.HasIndex("BookId");

                    b.HasIndex("ReaderId");

                    b.ToTable("LendBook", (string)null);
                });

            modelBuilder.Entity("Entity.Models.Librarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id")
                        .HasName("pk_Librarian");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Librarian", (string)null);
                });

            modelBuilder.Entity("Entity.Models.PublishingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("pk_PublishingType");

                    b.ToTable("PublishingType", (string)null);
                });

            modelBuilder.Entity("Entity.Models.Reader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DocNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("DocTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id")
                        .HasName("pk_Reader");

                    b.HasIndex("DocTypeId");

                    b.ToTable("Reader", (string)null);
                });

            modelBuilder.Entity("Entity.Models.Book", b =>
                {
                    b.HasOne("Entity.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("fk_BookAuthor");

                    b.HasOne("Entity.Models.PublishingType", "PublishingType")
                        .WithMany("Books")
                        .HasForeignKey("PublishingTypeId")
                        .HasConstraintName("fk_PublishingTypeId");

                    b.Navigation("Author");

                    b.Navigation("PublishingType");
                });

            modelBuilder.Entity("Entity.Models.LendBook", b =>
                {
                    b.HasOne("Entity.Models.Book", "Book")
                        .WithMany("LendBooks")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("fk_LendBookBook");

                    b.HasOne("Entity.Models.Reader", "Reader")
                        .WithMany("LendBooks")
                        .HasForeignKey("ReaderId")
                        .IsRequired()
                        .HasConstraintName("fk_LendBookReader");

                    b.Navigation("Book");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("Entity.Models.Reader", b =>
                {
                    b.HasOne("Entity.Models.DocType", "DocType")
                        .WithMany("Readers")
                        .HasForeignKey("DocTypeId")
                        .HasConstraintName("fk_ReaderDocType");

                    b.Navigation("DocType");
                });

            modelBuilder.Entity("Entity.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Entity.Models.Book", b =>
                {
                    b.Navigation("LendBooks");
                });

            modelBuilder.Entity("Entity.Models.DocType", b =>
                {
                    b.Navigation("Readers");
                });

            modelBuilder.Entity("Entity.Models.PublishingType", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Entity.Models.Reader", b =>
                {
                    b.Navigation("LendBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
